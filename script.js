// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –∫–æ–¥
document.addEventListener('DOMContentLoaded', () => {
    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const levelSelector = document.getElementById('levelSelector');
    const gameContainer = document.getElementById('gameContainer');
    const levelComplete = document.getElementById('levelComplete');
    const problemElement = document.getElementById('problem');
    const answerInput = document.getElementById('answer');
    const submitBtn = document.getElementById('submitBtn');
    const hintBtn = document.getElementById('hintBtn');
    const resultMessage = document.getElementById('resultMessage');
    const progressBar = document.getElementById('progressBar');
    const progressText = document.getElementById('progressText');
    const levelTitle = document.getElementById('levelTitle');
    const earnedCoins = document.getElementById('earnedCoins');
    const nextLevelBtn = document.getElementById('nextLevelBtn');
    const returnBtn = document.getElementById('returnBtn');
    const levelButtons = document.querySelectorAll('.level-btn');
    
    // –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let currentLevel = 1;
    let currentProblem = null;
    let correctAnswers = 0;
    let totalProblems = 10;
    let coins = 0;
    let hints = 0;
    let fireworks = 0;
    let selectedBackground = '';
    let selectedFont = '';
    
    // –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —É—Ä–æ–≤–Ω–∏
    const levelRewards = {
        1: 15,
        2: 20,
        3: 25,
        4: 30,
        5: 40
    };
    
    // –°–ª–æ–∂–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω–µ–π
    const levels = {
        1: {
            name: "–ù–æ–≤–∏—á–æ–∫",
            description: "–°–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ",
            generateProblem: generateBasicProblem
        },
        2: {
            name: "–£—á–µ–Ω–∏–∫",
            description: "–£–º–Ω–æ–∂–µ–Ω–∏–µ –∏ –¥–µ–ª–µ–Ω–∏–µ",
            generateProblem: generateIntermediateProblem
        },
        3: {
            name: "–ú–∞—Å—Ç–µ—Ä",
            description: "–°—Ç–µ–ø–µ–Ω–∏ –∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –∫–æ—Ä–Ω–∏",
            generateProblem: generateAdvancedProblem
        },
        4: {
            name: "–ì—É—Ä—É",
            description: "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
            generateProblem: generateExpertProblem
        },
        5: {
            name: "–õ–µ–≥–µ–Ω–¥–∞",
            description: "–°–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏",
            generateProblem: generateMasterProblem
        }
    };
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
    function initGame() {
        loadUserData();
        setupEventListeners();
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function loadUserData() {
        const user = JSON.parse(localStorage.getItem('currentUser'));
        if (user) {
            document.getElementById('usernameDisplay').textContent = user.username;
            coins = user.coins || 0;
            hints = user.hints || 0;
            fireworks = user.fireworks || 0;
            selectedBackground = user.background || '';
            selectedFont = user.font || '';
            
            updateUI();
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–æ–Ω –∏ —à—Ä–∏—Ñ—Ç
            if (selectedBackground) {
                applyBackground(selectedBackground);
            }
            
            if (selectedFont) {
                applyFont(selectedFont);
            }
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    function updateUI() {
        document.getElementById('coinsCount').textContent = coins;
        document.getElementById('hintsCount').textContent = hints;
        document.getElementById('invHints').textContent = hints;
        document.getElementById('invFireworks').textContent = fireworks;
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    function setupEventListeners() {
        // –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è
        levelButtons.forEach(button => {
            button.addEventListener('click', () => {
                currentLevel = parseInt(button.dataset.level);
                startLevel(currentLevel);
            });
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
        submitBtn.addEventListener('click', checkAnswer);
        answerInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                checkAnswer();
            }
        });
        
        // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        hintBtn.addEventListener('click', useHint);
        
        // –ö–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        nextLevelBtn.addEventListener('click', () => {
            currentLevel = Math.min(currentLevel + 1, 5);
            startLevel(currentLevel);
        });
        
        returnBtn.addEventListener('click', () => {
            levelComplete.style.display = 'none';
            levelSelector.style.display = 'block';
        });
    }
    
    // –ù–∞—á–∞–ª–æ —É—Ä–æ–≤–Ω—è
    function startLevel(level) {
        correctAnswers = 0;
        updateProgress();
        
        levelSelector.style.display = 'none';
        gameContainer.style.display = 'block';
        levelComplete.style.display = 'none';
        
        const levelData = levels[level];
        levelTitle.textContent = `–£—Ä–æ–≤–µ–Ω—å ${level}: ${levelData.name} (${levelData.description})`;
        
        generateNewProblem();
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    function generateNewProblem() {
        const levelData = levels[currentLevel];
        currentProblem = levelData.generateProblem();
        problemElement.textContent = currentProblem.text;
        answerInput.value = '';
        answerInput.focus();
        resultMessage.textContent = '';
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    function checkAnswer() {
        const userAnswer = parseFloat(answerInput.value);
        
        if (isNaN(userAnswer)) {
            resultMessage.textContent = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!";
            resultMessage.className = "result-message incorrect";
            return;
        }
        
        if (Math.abs(userAnswer - currentProblem.answer) < 0.0001) {
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            correctAnswers++;
            updateProgress();
            resultMessage.textContent = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üëç";
            resultMessage.className = "result-message correct";
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            problemElement.classList.add('animate__animated', 'animate__tada');
            setTimeout(() => {
                problemElement.classList.remove('animate__animated', 'animate__tada');
            }, 1000);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
            if (correctAnswers >= totalProblems) {
                completeLevel();
            } else {
                setTimeout(generateNewProblem, 1500);
            }
        } else {
            // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            resultMessage.textContent = `–ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${currentProblem.answer}`;
            resultMessage.className = "result-message incorrect";
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            problemElement.classList.add('animate__animated', 'animate__shakeX');
            setTimeout(() => {
                problemElement.classList.remove('animate__animated', 'animate__shakeX');
            }, 1000);
            
            setTimeout(generateNewProblem, 2000);
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    function updateProgress() {
        const progress = (correctAnswers / totalProblems) * 100;
        progressBar.style.width = `${progress}%`;
        progressText.textContent = `${correctAnswers}/${totalProblems}`;
    }
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    function completeLevel() {
        const reward = levelRewards[currentLevel];
        coins += reward;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        saveUserData();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        gameContainer.style.display = 'none';
        levelComplete.style.display = 'block';
        earnedCoins.textContent = reward;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (fireworks > 0) {
            launchFireworks();
            fireworks--;
            updateUI();
            saveUserData();
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        levelComplete.classList.add('animate__animated', 'animate__bounceIn');
        setTimeout(() => {
            levelComplete.classList.remove('animate__animated', 'animate__bounceIn');
        }, 1000);
    }
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    function useHint() {
        if (hints > 0) {
            answerInput.value = currentProblem.answer;
            hints--;
            updateUI();
            saveUserData();
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
            hintBtn.classList.add('animate__animated', 'animate__heartBeat');
            setTimeout(() => {
                hintBtn.classList.remove('animate__animated', 'animate__heartBeat');
            }, 1000);
        } else {
            alert("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫! –ö—É–ø–∏—Ç–µ –∏—Ö –≤ –º–∞–≥–∞–∑–∏–Ω–µ.");
        }
    }
    
    // –ó–∞–ø—É—Å–∫ —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–∞
    function launchFireworks() {
        const duration = 3000;
        const animationEnd = Date.now() + duration;
        const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };
        
        function randomInRange(min, max) {
            return Math.random() * (max - min) + min;
        }
        
        const interval = setInterval(function() {
            const timeLeft = animationEnd - Date.now();
            
            if (timeLeft <= 0) {
                return clearInterval(interval);
            }
            
            const particleCount = 50 * (timeLeft / duration);
            
            // –°–ª—É—á–∞–π–Ω—ã–µ —Ü–≤–µ—Ç–∞
            const colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff'];
            const color = colors[Math.floor(Math.random() * colors.length)];
            
            confetti({
                ...defaults,
                particleCount,
                origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 },
                colors: [color]
            });
            confetti({
                ...defaults,
                particleCount,
                origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 },
                colors: [color]
            });
        }, 250);
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function saveUserData() {
        const user = JSON.parse(localStorage.getItem('currentUser'));
        if (user) {
            user.coins = coins;
            user.hints = hints;
            user.fireworks = fireworks;
            user.background = selectedBackground;
            user.font = selectedFont;
            localStorage.setItem('currentUser', JSON.stringify(user));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const users = JSON.parse(localStorage.getItem('users')) || [];
            const userIndex = users.findIndex(u => u.username === user.username);
            if (userIndex !== -1) {
                users[userIndex] = user;
                localStorage.setItem('users', JSON.stringify(users));
            }
        }
    }
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞
    function applyBackground(bg) {
        const bgContainer = document.querySelector('.background-container');
        bgContainer.style.background = bg;
        selectedBackground = bg;
        saveUserData();
    }
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞
    function applyFont(font) {
        document.body.style.fontFamily = font;
        selectedFont = font;
        saveUserData();
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∑–∞–¥–∞—á –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    function generateBasicProblem() {
        const a = Math.floor(Math.random() * 50) + 1;
        const b = Math.floor(Math.random() * 50) + 1;
        const operations = ['+', '-'];
        const op = operations[Math.floor(Math.random() * operations.length)];
        
        let answer, text;
        if (op === '+') {
            answer = a + b;
            text = `${a} + ${b} = ?`;
        } else {
            // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
            if (a >= b) {
                answer = a - b;
                text = `${a} -
